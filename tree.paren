;; parse orgmode stream into a tree

(defun create-node (root &key (cls *node))
  (new (cls root (create))))

;; NODES

(defjsclass *node ()
  (defun initialize (root options)
    (setf% root root
           value ""
           css "root"
           
           options options
           
           can-have-children t
           children (array))
    (when (@ this setup)
      (-> this (setup))))

  (defun add-node (&key (cls *node))
    (let ((child (new (cls))))
      (setf (@ child root) this)
      (-> this (add-child child))))
  
  (defun add-child (child)
    (setf (@ child root) this)
    (-> this children (push child)))

  (defun siblings ()
    (var self this)
    (remove-if (lambda (node)
                 (eq node self))
               (@ this root children)))

  (defun remove ()
    "Deatach the node from the tree"
    (setf (@ this root children)
          (-> this (siblings))))

  (defun text ()
    "Returns text representation of the dom"
    (@ this value))

  (defun vdom ()
    "Builds vdom node"
    (-> virtual-dom (h :div (create class-name (@ this css))
                       (array (-> this (text))))))
  
  (defun render ()
    "Creates DOM elements"
    (let ((el (-> document (create-element :div))))
      (setf (@ el class-name) (@ this css)
            (@ el inner-h-t-m-l) (-> this (text)))
      el)))

(defjsclass *headline-node (*node)
  (defun setup ()
    (setf% css "line headline-0"
           depth 0))

  (defun incf-depth ()
    (incf (@ this depth))
    (setf (@ this css)
          (+ "line headline-" (@ this depth))))
  
  (defun text ()
    (let ((res ""))
      (do ((x 0 (+ x 1)))
          ((> x (@ this depth)))
        (setf res (+ res "*")))

      (+ res (@ this value)))))

(defjsclass *text-node (*node)
  (defun setup ()
    (setf% css "line text")))

(defjsclass *nl-node (*node)
  (defun setup ()
    (setf% can-have-children f
           css "nl")))

;; TREE

(defjsclass *tree ()
  (defun initialize ()
    (setf% root (new (*node this
                            (create :type 'root)))))
  
  (defun bfs (fun)
    "breadth first search"
    (labels ((process-node (node)
               (with-slots (children) node
                 (when (length children)
                   (dolist (child children)
                     (fun child))
                   (dolist (child children)
                     (process-node child))))))
      (fun (@ this root))
      (process-node (@ this root))))

  (defun dfs (fun)
    "depth first search"
    (labels ((process-node (node)
               (fun node)
               (with-slots (children) node
                 (when (length children)
                   (process-node (car children)))
                 (when (> (length children) 1)
                   (dolist (child (cdr children))
                     (process-node child))))))
      (process-node (@ this root))))
  
  (defun pprint ()
    (let ((res "")
          (nl (-> *string (from-char-code 13))))
      (-> this (dfs (lambda (node)
                      (setf res (+ res (-> node (text)) nl)))))
      res))

  (defun render-vdom ()
    "Render vdom"
    (setf (@ this dom-node)
          (-> virtual-dom (h :div (create class-name :holder))))

    ;; TODO we need to set correct `count` prop on each vdom node, the
    ;; easiest is to run reverse bfs, optimize

    (let ((stack (array (@ this dom-node))))
      (-> this (bfs (lambda (node)
                      (let ((dom-node (-> node (vdom)))
                            (parent-dom (@ node root dom-node)))
                        (-> stack (push dom-node))
                        (setf (@ node dom-node) dom-node)
                        (when (numberp (@ dom-node count))
                          (setf (@ dom-node count) 0))
                        (-> parent-dom children (push dom-node))))))
      
      (do ((x (length stack) (- x 1)))
          ((<= x 0))
        (let ((node (aref stack (- x 1))))
          (when (numberp (@ node count))
            (let ((children 0))
              (dolist (child (@ node children))
                (if (@ child count)
                    (setf children (+ children 1 (@ child count)))
                    (setf children (+ children 1)))))

            (setf (@ node count) children)))))
      
      (@ this dom-node))
  
  (defun render ()
    "This will transform parse tree into DOM tree"
    (setf (@ this dom-node)
          (-> document (create-element :div)))
    (-> this (bfs (lambda (node)
                    (let ((dom-node (-> node (render)))
                          (parent-dom (@ node root dom-node)))
                      (setf (@ node dom-node) dom-node)
                      (-> parent-dom (append-child dom-node))))))
    (@ this dom-node)))

;; PARSER

(defjsclass *org-tree-parser ()
  (defun initialize (options)
    (setf% current-node nil
           tree (new (*tree))
           parser (new (*org-parser (-> this (init-parser-opts))))))

  (defun init-parser-opts ()
    (let ((cbs (create)))
      (dolist (ev *events) ;; <- this is orgmode-parser events
        (let* ((ev-capital (+ (-> ev (char-at 0) (to-upper-case))
                             (-> ev (slice 1))))
              (cb (getprop this (+ "on" ev-capital))))
          (when cb
            (setf (getprop cbs ev)
                  (-> cb (bind this))))))
      cbs))

  (defun write (data)
    (-> this parser (write data)))

  (defun root-or-current ()
    (or (@ this current-node)
        (@ this tree root)))
  
  ;; HEADLINE
  (defun on-headline-start ()
    (let* ((tree (@ this tree))
           (node (create-node (@ tree root)
                              :cls *headline-node)))
      (setf (@ this current-node) node)
      (-> tree root (add-child node))))
      
  ;; if getting headline depth means it's second level or deeper
  ;; get the parent and add a child to it
  (defun on-headline-depth ()
    (let* ((node (@ this current-node))
           (tobe-parent (last (-> node (siblings)))))
      (-> node (incf-depth))
      (-> node (remove))
      (-> tobe-parent (add-child node))))
  
  (defun on-headline (data)
    (let ((cur (@ this current-node)))
      (setf (@ cur value)
            (+ (@ cur value) data))))

  (defun get-text-root ()
    )
  
  ;; TEXT
  (defun on-text (data)
    ;; when current node is text we just add data to it, if not, then
    ;; create a new text node
    (var self this)
    (labels ((get-text-root ()
               ;; text root is either the root of the document when
               ;; text if the first input, or it's the current-node,
               ;; but only if current-node can have children, if
               ;; current-node can't have children take current-node
               ;; root
               (if (@ self current-node)
                   (if (@ self current-node can-children)
                       (@ self current-node)
                       (@ self current-node root))
                   (@ self tree root)))

             (create-text-node ()
               (let* ((tree (@ this tree))
                      (new-node-root (get-text-root))
                      (node (create-node new-node-root
                                         :cls *text-node)))
                 (setf (@ self current-node) node)
                 (-> new-node-root (add-child node)))))
    
      (when (not (instanceof (@ this current-node)
                             *text-node))
        (create-text-node))
      
      (setf (@ this current-node value)
            (+ (@ this current-node value) data))))

  (defun on-newline ()
    (let* ((root (if (@ this current-node)
                    (@ this current-node root)
                    (@ this tree root)))
          (node (create-node root :cls *nl-node)))

      (log root)
      
      (setf (@ this current-node) node)
      (-> root (add-child node)))))
  
(defun main ()
  (let ((p (-> (new (*org-tree-parser)))))
    (-> p (write "* YO
Text0
* Hello1
Text1
** Hello2
*** Hello3"))
    (log p)
    (setf (@ window parser) p)
    (let ((pre (-> document (create-element :pre)))
          (parent (-> document (get-element-by-id :hello))))
      (setf (@ pre inner-h-t-m-l) (-> p tree (pprint)))
      (-> parent (append-child pre)))

    (let ((el (-> document (get-element-by-id :main))))
      (-> el (append-child (-> p tree (render)))))

    (let* ((el (-> document (get-element-by-id :vdom)))
           (tree (-> p tree (render-vdom)))
           (node (-> virtual-dom (create tree))))
      (-> el (append-child node)))))
